/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package abuda.indexer.execution_outcomes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1144255505972203238L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"abuda.indexer.execution_outcomes\",\"fields\":[{\"name\":\"receipt_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"executed_in_block_hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"executed_in_block_timestamp\",\"type\":{\"type\":\"bytes\",\"scale\":0,\"precision\":20,\"connect.version\":1,\"connect.parameters\":{\"scale\":\"0\",\"connect.decimal.precision\":\"20\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"index_in_chunk\",\"type\":\"int\"},{\"name\":\"gas_burnt\",\"type\":{\"type\":\"bytes\",\"scale\":0,\"precision\":20,\"connect.version\":1,\"connect.parameters\":{\"scale\":\"0\",\"connect.decimal.precision\":\"20\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"tokens_burnt\",\"type\":{\"type\":\"bytes\",\"scale\":0,\"precision\":45,\"connect.version\":1,\"connect.parameters\":{\"scale\":\"0\",\"connect.decimal.precision\":\"45\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"executor_account_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.version\":1,\"connect.parameters\":{\"allowed\":\"UNKNOWN,FAILURE,SUCCESS_VALUE,SUCCESS_RECEIPT_ID\"},\"connect.name\":\"io.debezium.data.Enum\"}},{\"name\":\"shard_id\",\"type\":{\"type\":\"bytes\",\"scale\":0,\"precision\":20,\"connect.version\":1,\"connect.parameters\":{\"scale\":\"0\",\"connect.decimal.precision\":\"20\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"__deleted\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}],\"connect.name\":\"abuda.indexer.execution_outcomes.Value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Value> ENCODER =
      new BinaryMessageEncoder<Value>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Value> DECODER =
      new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Value> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Value> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Value> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Value to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Value from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Value instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Value fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String receipt_id;
   private java.lang.String executed_in_block_hash;
   private java.math.BigDecimal executed_in_block_timestamp;
   private int index_in_chunk;
   private java.math.BigDecimal gas_burnt;
   private java.math.BigDecimal tokens_burnt;
   private java.lang.String executor_account_id;
   private java.lang.String status;
   private java.math.BigDecimal shard_id;
   private java.lang.String __deleted;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param receipt_id The new value for receipt_id
   * @param executed_in_block_hash The new value for executed_in_block_hash
   * @param executed_in_block_timestamp The new value for executed_in_block_timestamp
   * @param index_in_chunk The new value for index_in_chunk
   * @param gas_burnt The new value for gas_burnt
   * @param tokens_burnt The new value for tokens_burnt
   * @param executor_account_id The new value for executor_account_id
   * @param status The new value for status
   * @param shard_id The new value for shard_id
   * @param __deleted The new value for __deleted
   */
  public Value(java.lang.String receipt_id, java.lang.String executed_in_block_hash, java.math.BigDecimal executed_in_block_timestamp, java.lang.Integer index_in_chunk, java.math.BigDecimal gas_burnt, java.math.BigDecimal tokens_burnt, java.lang.String executor_account_id, java.lang.String status, java.math.BigDecimal shard_id, java.lang.String __deleted) {
    this.receipt_id = receipt_id;
    this.executed_in_block_hash = executed_in_block_hash;
    this.executed_in_block_timestamp = executed_in_block_timestamp;
    this.index_in_chunk = index_in_chunk;
    this.gas_burnt = gas_burnt;
    this.tokens_burnt = tokens_burnt;
    this.executor_account_id = executor_account_id;
    this.status = status;
    this.shard_id = shard_id;
    this.__deleted = __deleted;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return receipt_id;
    case 1: return executed_in_block_hash;
    case 2: return executed_in_block_timestamp;
    case 3: return index_in_chunk;
    case 4: return gas_burnt;
    case 5: return tokens_burnt;
    case 6: return executor_account_id;
    case 7: return status;
    case 8: return shard_id;
    case 9: return __deleted;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: receipt_id = value$ != null ? value$.toString() : null; break;
    case 1: executed_in_block_hash = value$ != null ? value$.toString() : null; break;
    case 2: executed_in_block_timestamp = (java.math.BigDecimal)value$; break;
    case 3: index_in_chunk = (java.lang.Integer)value$; break;
    case 4: gas_burnt = (java.math.BigDecimal)value$; break;
    case 5: tokens_burnt = (java.math.BigDecimal)value$; break;
    case 6: executor_account_id = value$ != null ? value$.toString() : null; break;
    case 7: status = value$ != null ? value$.toString() : null; break;
    case 8: shard_id = (java.math.BigDecimal)value$; break;
    case 9: __deleted = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'receipt_id' field.
   * @return The value of the 'receipt_id' field.
   */
  public java.lang.String getReceiptId() {
    return receipt_id;
  }


  /**
   * Sets the value of the 'receipt_id' field.
   * @param value the value to set.
   */
  public void setReceiptId(java.lang.String value) {
    this.receipt_id = value;
  }

  /**
   * Gets the value of the 'executed_in_block_hash' field.
   * @return The value of the 'executed_in_block_hash' field.
   */
  public java.lang.String getExecutedInBlockHash() {
    return executed_in_block_hash;
  }


  /**
   * Sets the value of the 'executed_in_block_hash' field.
   * @param value the value to set.
   */
  public void setExecutedInBlockHash(java.lang.String value) {
    this.executed_in_block_hash = value;
  }

  /**
   * Gets the value of the 'executed_in_block_timestamp' field.
   * @return The value of the 'executed_in_block_timestamp' field.
   */
  public java.math.BigDecimal getExecutedInBlockTimestamp() {
    return executed_in_block_timestamp;
  }


  /**
   * Sets the value of the 'executed_in_block_timestamp' field.
   * @param value the value to set.
   */
  public void setExecutedInBlockTimestamp(java.math.BigDecimal value) {
    this.executed_in_block_timestamp = value;
  }

  /**
   * Gets the value of the 'index_in_chunk' field.
   * @return The value of the 'index_in_chunk' field.
   */
  public int getIndexInChunk() {
    return index_in_chunk;
  }


  /**
   * Sets the value of the 'index_in_chunk' field.
   * @param value the value to set.
   */
  public void setIndexInChunk(int value) {
    this.index_in_chunk = value;
  }

  /**
   * Gets the value of the 'gas_burnt' field.
   * @return The value of the 'gas_burnt' field.
   */
  public java.math.BigDecimal getGasBurnt() {
    return gas_burnt;
  }


  /**
   * Sets the value of the 'gas_burnt' field.
   * @param value the value to set.
   */
  public void setGasBurnt(java.math.BigDecimal value) {
    this.gas_burnt = value;
  }

  /**
   * Gets the value of the 'tokens_burnt' field.
   * @return The value of the 'tokens_burnt' field.
   */
  public java.math.BigDecimal getTokensBurnt() {
    return tokens_burnt;
  }


  /**
   * Sets the value of the 'tokens_burnt' field.
   * @param value the value to set.
   */
  public void setTokensBurnt(java.math.BigDecimal value) {
    this.tokens_burnt = value;
  }

  /**
   * Gets the value of the 'executor_account_id' field.
   * @return The value of the 'executor_account_id' field.
   */
  public java.lang.String getExecutorAccountId() {
    return executor_account_id;
  }


  /**
   * Sets the value of the 'executor_account_id' field.
   * @param value the value to set.
   */
  public void setExecutorAccountId(java.lang.String value) {
    this.executor_account_id = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'shard_id' field.
   * @return The value of the 'shard_id' field.
   */
  public java.math.BigDecimal getShardId() {
    return shard_id;
  }


  /**
   * Sets the value of the 'shard_id' field.
   * @param value the value to set.
   */
  public void setShardId(java.math.BigDecimal value) {
    this.shard_id = value;
  }

  /**
   * Gets the value of the '__deleted' field.
   * @return The value of the '__deleted' field.
   */
  public java.lang.String getDeleted$1() {
    return __deleted;
  }


  /**
   * Sets the value of the '__deleted' field.
   * @param value the value to set.
   */
  public void setDeleted$1(java.lang.String value) {
    this.__deleted = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.execution_outcomes.Value.Builder newBuilder() {
    return new abuda.indexer.execution_outcomes.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.execution_outcomes.Value.Builder newBuilder(abuda.indexer.execution_outcomes.Value.Builder other) {
    if (other == null) {
      return new abuda.indexer.execution_outcomes.Value.Builder();
    } else {
      return new abuda.indexer.execution_outcomes.Value.Builder(other);
    }
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.execution_outcomes.Value.Builder newBuilder(abuda.indexer.execution_outcomes.Value other) {
    if (other == null) {
      return new abuda.indexer.execution_outcomes.Value.Builder();
    } else {
      return new abuda.indexer.execution_outcomes.Value.Builder(other);
    }
  }

  /**
   * RecordBuilder for Value instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    private java.lang.String receipt_id;
    private java.lang.String executed_in_block_hash;
    private java.math.BigDecimal executed_in_block_timestamp;
    private int index_in_chunk;
    private java.math.BigDecimal gas_burnt;
    private java.math.BigDecimal tokens_burnt;
    private java.lang.String executor_account_id;
    private java.lang.String status;
    private java.math.BigDecimal shard_id;
    private java.lang.String __deleted;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(abuda.indexer.execution_outcomes.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.receipt_id)) {
        this.receipt_id = data().deepCopy(fields()[0].schema(), other.receipt_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.executed_in_block_hash)) {
        this.executed_in_block_hash = data().deepCopy(fields()[1].schema(), other.executed_in_block_hash);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.executed_in_block_timestamp)) {
        this.executed_in_block_timestamp = data().deepCopy(fields()[2].schema(), other.executed_in_block_timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.index_in_chunk)) {
        this.index_in_chunk = data().deepCopy(fields()[3].schema(), other.index_in_chunk);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.gas_burnt)) {
        this.gas_burnt = data().deepCopy(fields()[4].schema(), other.gas_burnt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.tokens_burnt)) {
        this.tokens_burnt = data().deepCopy(fields()[5].schema(), other.tokens_burnt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.executor_account_id)) {
        this.executor_account_id = data().deepCopy(fields()[6].schema(), other.executor_account_id);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.shard_id)) {
        this.shard_id = data().deepCopy(fields()[8].schema(), other.shard_id);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.__deleted)) {
        this.__deleted = data().deepCopy(fields()[9].schema(), other.__deleted);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(abuda.indexer.execution_outcomes.Value other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.receipt_id)) {
        this.receipt_id = data().deepCopy(fields()[0].schema(), other.receipt_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.executed_in_block_hash)) {
        this.executed_in_block_hash = data().deepCopy(fields()[1].schema(), other.executed_in_block_hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.executed_in_block_timestamp)) {
        this.executed_in_block_timestamp = data().deepCopy(fields()[2].schema(), other.executed_in_block_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.index_in_chunk)) {
        this.index_in_chunk = data().deepCopy(fields()[3].schema(), other.index_in_chunk);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gas_burnt)) {
        this.gas_burnt = data().deepCopy(fields()[4].schema(), other.gas_burnt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tokens_burnt)) {
        this.tokens_burnt = data().deepCopy(fields()[5].schema(), other.tokens_burnt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.executor_account_id)) {
        this.executor_account_id = data().deepCopy(fields()[6].schema(), other.executor_account_id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.shard_id)) {
        this.shard_id = data().deepCopy(fields()[8].schema(), other.shard_id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.__deleted)) {
        this.__deleted = data().deepCopy(fields()[9].schema(), other.__deleted);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'receipt_id' field.
      * @return The value.
      */
    public java.lang.String getReceiptId() {
      return receipt_id;
    }


    /**
      * Sets the value of the 'receipt_id' field.
      * @param value The value of 'receipt_id'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setReceiptId(java.lang.String value) {
      validate(fields()[0], value);
      this.receipt_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'receipt_id' field has been set.
      * @return True if the 'receipt_id' field has been set, false otherwise.
      */
    public boolean hasReceiptId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'receipt_id' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearReceiptId() {
      receipt_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'executed_in_block_hash' field.
      * @return The value.
      */
    public java.lang.String getExecutedInBlockHash() {
      return executed_in_block_hash;
    }


    /**
      * Sets the value of the 'executed_in_block_hash' field.
      * @param value The value of 'executed_in_block_hash'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setExecutedInBlockHash(java.lang.String value) {
      validate(fields()[1], value);
      this.executed_in_block_hash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'executed_in_block_hash' field has been set.
      * @return True if the 'executed_in_block_hash' field has been set, false otherwise.
      */
    public boolean hasExecutedInBlockHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'executed_in_block_hash' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearExecutedInBlockHash() {
      executed_in_block_hash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'executed_in_block_timestamp' field.
      * @return The value.
      */
    public java.math.BigDecimal getExecutedInBlockTimestamp() {
      return executed_in_block_timestamp;
    }


    /**
      * Sets the value of the 'executed_in_block_timestamp' field.
      * @param value The value of 'executed_in_block_timestamp'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setExecutedInBlockTimestamp(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.executed_in_block_timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'executed_in_block_timestamp' field has been set.
      * @return True if the 'executed_in_block_timestamp' field has been set, false otherwise.
      */
    public boolean hasExecutedInBlockTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'executed_in_block_timestamp' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearExecutedInBlockTimestamp() {
      executed_in_block_timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'index_in_chunk' field.
      * @return The value.
      */
    public int getIndexInChunk() {
      return index_in_chunk;
    }


    /**
      * Sets the value of the 'index_in_chunk' field.
      * @param value The value of 'index_in_chunk'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setIndexInChunk(int value) {
      validate(fields()[3], value);
      this.index_in_chunk = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'index_in_chunk' field has been set.
      * @return True if the 'index_in_chunk' field has been set, false otherwise.
      */
    public boolean hasIndexInChunk() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'index_in_chunk' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearIndexInChunk() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gas_burnt' field.
      * @return The value.
      */
    public java.math.BigDecimal getGasBurnt() {
      return gas_burnt;
    }


    /**
      * Sets the value of the 'gas_burnt' field.
      * @param value The value of 'gas_burnt'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setGasBurnt(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.gas_burnt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gas_burnt' field has been set.
      * @return True if the 'gas_burnt' field has been set, false otherwise.
      */
    public boolean hasGasBurnt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gas_burnt' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearGasBurnt() {
      gas_burnt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokens_burnt' field.
      * @return The value.
      */
    public java.math.BigDecimal getTokensBurnt() {
      return tokens_burnt;
    }


    /**
      * Sets the value of the 'tokens_burnt' field.
      * @param value The value of 'tokens_burnt'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setTokensBurnt(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.tokens_burnt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tokens_burnt' field has been set.
      * @return True if the 'tokens_burnt' field has been set, false otherwise.
      */
    public boolean hasTokensBurnt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tokens_burnt' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearTokensBurnt() {
      tokens_burnt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'executor_account_id' field.
      * @return The value.
      */
    public java.lang.String getExecutorAccountId() {
      return executor_account_id;
    }


    /**
      * Sets the value of the 'executor_account_id' field.
      * @param value The value of 'executor_account_id'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setExecutorAccountId(java.lang.String value) {
      validate(fields()[6], value);
      this.executor_account_id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'executor_account_id' field has been set.
      * @return True if the 'executor_account_id' field has been set, false otherwise.
      */
    public boolean hasExecutorAccountId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'executor_account_id' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearExecutorAccountId() {
      executor_account_id = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setStatus(java.lang.String value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'shard_id' field.
      * @return The value.
      */
    public java.math.BigDecimal getShardId() {
      return shard_id;
    }


    /**
      * Sets the value of the 'shard_id' field.
      * @param value The value of 'shard_id'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setShardId(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.shard_id = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'shard_id' field has been set.
      * @return True if the 'shard_id' field has been set, false otherwise.
      */
    public boolean hasShardId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'shard_id' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearShardId() {
      shard_id = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the '__deleted' field.
      * @return The value.
      */
    public java.lang.String getDeleted$1() {
      return __deleted;
    }


    /**
      * Sets the value of the '__deleted' field.
      * @param value The value of '__deleted'.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder setDeleted$1(java.lang.String value) {
      validate(fields()[9], value);
      this.__deleted = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the '__deleted' field has been set.
      * @return True if the '__deleted' field has been set, false otherwise.
      */
    public boolean hasDeleted$1() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the '__deleted' field.
      * @return This builder.
      */
    public abuda.indexer.execution_outcomes.Value.Builder clearDeleted$1() {
      __deleted = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Value build() {
      try {
        Value record = new Value();
        record.receipt_id = fieldSetFlags()[0] ? this.receipt_id : (java.lang.String) defaultValue(fields()[0]);
        record.executed_in_block_hash = fieldSetFlags()[1] ? this.executed_in_block_hash : (java.lang.String) defaultValue(fields()[1]);
        record.executed_in_block_timestamp = fieldSetFlags()[2] ? this.executed_in_block_timestamp : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.index_in_chunk = fieldSetFlags()[3] ? this.index_in_chunk : (java.lang.Integer) defaultValue(fields()[3]);
        record.gas_burnt = fieldSetFlags()[4] ? this.gas_burnt : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.tokens_burnt = fieldSetFlags()[5] ? this.tokens_burnt : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.executor_account_id = fieldSetFlags()[6] ? this.executor_account_id : (java.lang.String) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.String) defaultValue(fields()[7]);
        record.shard_id = fieldSetFlags()[8] ? this.shard_id : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.__deleted = fieldSetFlags()[9] ? this.__deleted : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Value>
    WRITER$ = (org.apache.avro.io.DatumWriter<Value>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Value>
    READER$ = (org.apache.avro.io.DatumReader<Value>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










