/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package abuda.indexer.token_balance;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6209270727262501152L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"abuda.indexer.token_balance\",\"fields\":[{\"name\":\"account\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"balance\",\"type\":{\"type\":\"bytes\",\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"connect.parameters\":{\"connect.decimal.precision\":\"45\",\"scale\":\"0\"},\"connect.version\":1,\"logicalType\":\"decimal\",\"precision\":45,\"scale\":0}},{\"name\":\"block_timestamp\",\"type\":\"long\"},{\"name\":\"block_hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transaction_hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"receipt_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Value> ENCODER =
      new BinaryMessageEncoder<Value>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Value> DECODER =
      new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Value> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Value> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Value> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Value to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Value from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Value instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Value fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String account;
   private java.math.BigDecimal balance;
   private long block_timestamp;
   private java.lang.String block_hash;
   private java.lang.String transaction_hash;
   private java.lang.String receipt_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param account The new value for account
   * @param balance The new value for balance
   * @param block_timestamp The new value for block_timestamp
   * @param block_hash The new value for block_hash
   * @param transaction_hash The new value for transaction_hash
   * @param receipt_id The new value for receipt_id
   */
  public Value(java.lang.String account, java.math.BigDecimal balance, java.lang.Long block_timestamp, java.lang.String block_hash, java.lang.String transaction_hash, java.lang.String receipt_id) {
    this.account = account;
    this.balance = balance;
    this.block_timestamp = block_timestamp;
    this.block_hash = block_hash;
    this.transaction_hash = transaction_hash;
    this.receipt_id = receipt_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return account;
    case 1: return balance;
    case 2: return block_timestamp;
    case 3: return block_hash;
    case 4: return transaction_hash;
    case 5: return receipt_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: account = value$ != null ? value$.toString() : null; break;
    case 1: balance = (java.math.BigDecimal)value$; break;
    case 2: block_timestamp = (java.lang.Long)value$; break;
    case 3: block_hash = value$ != null ? value$.toString() : null; break;
    case 4: transaction_hash = value$ != null ? value$.toString() : null; break;
    case 5: receipt_id = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.lang.String getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.String value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public java.math.BigDecimal getBalance() {
    return balance;
  }


  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(java.math.BigDecimal value) {
    this.balance = value;
  }

  /**
   * Gets the value of the 'block_timestamp' field.
   * @return The value of the 'block_timestamp' field.
   */
  public long getBlockTimestamp() {
    return block_timestamp;
  }


  /**
   * Sets the value of the 'block_timestamp' field.
   * @param value the value to set.
   */
  public void setBlockTimestamp(long value) {
    this.block_timestamp = value;
  }

  /**
   * Gets the value of the 'block_hash' field.
   * @return The value of the 'block_hash' field.
   */
  public java.lang.String getBlockHash() {
    return block_hash;
  }


  /**
   * Sets the value of the 'block_hash' field.
   * @param value the value to set.
   */
  public void setBlockHash(java.lang.String value) {
    this.block_hash = value;
  }

  /**
   * Gets the value of the 'transaction_hash' field.
   * @return The value of the 'transaction_hash' field.
   */
  public java.lang.String getTransactionHash() {
    return transaction_hash;
  }


  /**
   * Sets the value of the 'transaction_hash' field.
   * @param value the value to set.
   */
  public void setTransactionHash(java.lang.String value) {
    this.transaction_hash = value;
  }

  /**
   * Gets the value of the 'receipt_id' field.
   * @return The value of the 'receipt_id' field.
   */
  public java.lang.String getReceiptId() {
    return receipt_id;
  }


  /**
   * Sets the value of the 'receipt_id' field.
   * @param value the value to set.
   */
  public void setReceiptId(java.lang.String value) {
    this.receipt_id = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.token_balance.Value.Builder newBuilder() {
    return new abuda.indexer.token_balance.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.token_balance.Value.Builder newBuilder(abuda.indexer.token_balance.Value.Builder other) {
    if (other == null) {
      return new abuda.indexer.token_balance.Value.Builder();
    } else {
      return new abuda.indexer.token_balance.Value.Builder(other);
    }
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static abuda.indexer.token_balance.Value.Builder newBuilder(abuda.indexer.token_balance.Value other) {
    if (other == null) {
      return new abuda.indexer.token_balance.Value.Builder();
    } else {
      return new abuda.indexer.token_balance.Value.Builder(other);
    }
  }

  /**
   * RecordBuilder for Value instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    private java.lang.String account;
    private java.math.BigDecimal balance;
    private long block_timestamp;
    private java.lang.String block_hash;
    private java.lang.String transaction_hash;
    private java.lang.String receipt_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(abuda.indexer.token_balance.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.balance)) {
        this.balance = data().deepCopy(fields()[1].schema(), other.balance);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.block_timestamp)) {
        this.block_timestamp = data().deepCopy(fields()[2].schema(), other.block_timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.block_hash)) {
        this.block_hash = data().deepCopy(fields()[3].schema(), other.block_hash);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transaction_hash)) {
        this.transaction_hash = data().deepCopy(fields()[4].schema(), other.transaction_hash);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.receipt_id)) {
        this.receipt_id = data().deepCopy(fields()[5].schema(), other.receipt_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(abuda.indexer.token_balance.Value other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.balance)) {
        this.balance = data().deepCopy(fields()[1].schema(), other.balance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.block_timestamp)) {
        this.block_timestamp = data().deepCopy(fields()[2].schema(), other.block_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.block_hash)) {
        this.block_hash = data().deepCopy(fields()[3].schema(), other.block_hash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transaction_hash)) {
        this.transaction_hash = data().deepCopy(fields()[4].schema(), other.transaction_hash);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.receipt_id)) {
        this.receipt_id = data().deepCopy(fields()[5].schema(), other.receipt_id);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.lang.String getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setAccount(java.lang.String value) {
      validate(fields()[0], value);
      this.account = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearAccount() {
      account = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public java.math.BigDecimal getBalance() {
      return balance;
    }


    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setBalance(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.balance = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearBalance() {
      balance = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'block_timestamp' field.
      * @return The value.
      */
    public long getBlockTimestamp() {
      return block_timestamp;
    }


    /**
      * Sets the value of the 'block_timestamp' field.
      * @param value The value of 'block_timestamp'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setBlockTimestamp(long value) {
      validate(fields()[2], value);
      this.block_timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'block_timestamp' field has been set.
      * @return True if the 'block_timestamp' field has been set, false otherwise.
      */
    public boolean hasBlockTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'block_timestamp' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearBlockTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'block_hash' field.
      * @return The value.
      */
    public java.lang.String getBlockHash() {
      return block_hash;
    }


    /**
      * Sets the value of the 'block_hash' field.
      * @param value The value of 'block_hash'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setBlockHash(java.lang.String value) {
      validate(fields()[3], value);
      this.block_hash = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'block_hash' field has been set.
      * @return True if the 'block_hash' field has been set, false otherwise.
      */
    public boolean hasBlockHash() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'block_hash' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearBlockHash() {
      block_hash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_hash' field.
      * @return The value.
      */
    public java.lang.String getTransactionHash() {
      return transaction_hash;
    }


    /**
      * Sets the value of the 'transaction_hash' field.
      * @param value The value of 'transaction_hash'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setTransactionHash(java.lang.String value) {
      validate(fields()[4], value);
      this.transaction_hash = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_hash' field has been set.
      * @return True if the 'transaction_hash' field has been set, false otherwise.
      */
    public boolean hasTransactionHash() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transaction_hash' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearTransactionHash() {
      transaction_hash = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'receipt_id' field.
      * @return The value.
      */
    public java.lang.String getReceiptId() {
      return receipt_id;
    }


    /**
      * Sets the value of the 'receipt_id' field.
      * @param value The value of 'receipt_id'.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder setReceiptId(java.lang.String value) {
      validate(fields()[5], value);
      this.receipt_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'receipt_id' field has been set.
      * @return True if the 'receipt_id' field has been set, false otherwise.
      */
    public boolean hasReceiptId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'receipt_id' field.
      * @return This builder.
      */
    public abuda.indexer.token_balance.Value.Builder clearReceiptId() {
      receipt_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Value build() {
      try {
        Value record = new Value();
        record.account = fieldSetFlags()[0] ? this.account : (java.lang.String) defaultValue(fields()[0]);
        record.balance = fieldSetFlags()[1] ? this.balance : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.block_timestamp = fieldSetFlags()[2] ? this.block_timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.block_hash = fieldSetFlags()[3] ? this.block_hash : (java.lang.String) defaultValue(fields()[3]);
        record.transaction_hash = fieldSetFlags()[4] ? this.transaction_hash : (java.lang.String) defaultValue(fields()[4]);
        record.receipt_id = fieldSetFlags()[5] ? this.receipt_id : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Value>
    WRITER$ = (org.apache.avro.io.DatumWriter<Value>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Value>
    READER$ = (org.apache.avro.io.DatumReader<Value>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










